from sage.rings.integer import Integer
from sage.all import ZZ

def directProd(c, y, kap):
return ZZ(mpz_mul_ui(kap, Integer(c), Integer(y)))

def partialProd(c, y, kap):
"""Computes (c*y) / 2^(kap+1), but only the w=sizeof(int)/2 bits after the binary point. We assume that c<2^kap and y<2^(kap+1), and that kap+1 is a multiple of w"""

w = sizeof(int) * 4  # size of half-word in bits (16 bits)
nw = (kap + 1) // w  # maximum number of half-words in y

assert nw * w == kap + 1

yz = Integer(y)
yw = mpz_export_to_buffer(c, &ny, -1, sizeof(int), 0, 0, yz.value)
assert ny <= nw

cz = Integer(c)
cw = mpz_export_to_buffer(c, &nc, -1, sizeof(int), 0, 0, cz.value)

val = 0
for i in range(nw - 2):
val += cw[i] * ((yw[nw - 1 - i] << w) + yw[nw - 2 - i]) + ((cw[i] * yw[nw - 3 - i]) >> w)

val += cw[nw - 2] * ((yw[nw - 1 - (nw - 2)] << w) + yw[nw - 2 - (nw - 2)]) + cw[nw - 1] * (yw[nw - 1 - (nw - 1)] << w)

return ZZ(val)

def testPartialProd():
kap = (ZZ(1) << 20) - 1
u = 10
y = random_int(ZZ(1) << kap)
c = random_int(ZZ(1) << kap)
import timeit
t = timeit.timeit("slowprod=" + "(((c * y) >> (kap + 1 - u)) & ((ZZ(1) << u) - 1)),", number=1)
print("slowprod=", (((c * y) >> (kap + 1 - u)) & ((ZZ(1) << u) - 1)), t)
t = timeit.timeit("fastprod=" + "partialProd(c, y, kap) >> (sizeof(int) * 8 - u)", number=1)
print("fastprod=", partialProd(c, y, kap) >> (sizeof(int) * 8 - u), t)
t = timeit.timeit("directprod=" + "directProd(c, y, kap) >> (sizeof(mp_limb_t) * 8 - u)", number=1)
print("directprod=", directProd(c, y, kap) >> (sizeof(mp_limb_t) * 8 - u), t)
